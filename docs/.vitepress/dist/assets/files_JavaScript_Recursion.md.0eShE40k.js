import{_ as a,o as e,c as t,R as r}from"./chunks/framework.Vrn_wj7i.js";const f=JSON.parse('{"title":"js学习 --- 递归","description":"","frontmatter":{"title":"js学习 --- 递归","date":"2022-06-16T19:24:26.000Z","tags":"递归","summary":"对于递归的简单理解","categories":"JavaScript"},"headers":[],"relativePath":"files/JavaScript/Recursion.md","filePath":"files/JavaScript/Recursion.md"}'),i={name:"files/JavaScript/Recursion.md"},o=r('<h1 id="递归" tabindex="-1">递归 <a class="header-anchor" href="#递归" aria-label="Permalink to &quot;递归&quot;">​</a></h1><h2 id="定义" tabindex="-1">定义 <a class="header-anchor" href="#定义" aria-label="Permalink to &quot;定义&quot;">​</a></h2><p>程序调用自身的编程技巧成为递归（recursion）。</p><h2 id="思想" tabindex="-1">思想 <a class="header-anchor" href="#思想" aria-label="Permalink to &quot;思想&quot;">​</a></h2><p>重复利用函数本身能实现的功能，按照顺序进行不断的自调用</p><h2 id="核心" tabindex="-1">核心 <a class="header-anchor" href="#核心" aria-label="Permalink to &quot;核心&quot;">​</a></h2><p>建立递归函数</p><ul><li>边界条件（递归结束条件）</li><li>递归前进段</li><li>递归返回段</li></ul><p>当边界条件不满足时，递归前进；当递归条件满足时，递归返回。</p><h2 id="使用示例" tabindex="-1">使用示例 <a class="header-anchor" href="#使用示例" aria-label="Permalink to &quot;使用示例&quot;">​</a></h2><ol><li><a href="./TreeTraversal.html">树结构的遍历</a></li></ol>',11),l=[o];function s(c,n,h,d,_,p){return e(),t("div",null,l)}const m=a(i,[["render",s]]);export{f as __pageData,m as default};

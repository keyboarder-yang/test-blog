import{_ as e,o as a,c as o,R as c}from"./chunks/framework.Vrn_wj7i.js";const k=JSON.parse('{"title":"js学习 --- 事件循环机制","description":"","frontmatter":{"title":"js学习 --- 事件循环机制","date":"2022-06-11T17:10:20.000Z","tags":["事件循环"],"summary":"对于事件循环机制、宏任务、微任务的总结","categories":["JavaScript"]},"headers":[],"relativePath":"files/JavaScript/EventLoop.md","filePath":"files/JavaScript/EventLoop.md"}'),t={name:"files/JavaScript/EventLoop.md"},l=c('<h1 id="事件循环机制" tabindex="-1">事件循环机制 <a class="header-anchor" href="#事件循环机制" aria-label="Permalink to &quot;事件循环机制&quot;">​</a></h1><p><code>事件循环</code>又叫做<code>消息循环</code>，是浏览器渲染主线程的工作方式。每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。根据W3C官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p><h2 id="运行原理" tabindex="-1">运行原理 <a class="header-anchor" href="#运行原理" aria-label="Permalink to &quot;运行原理&quot;">​</a></h2><h3 id="调用栈-callstack" tabindex="-1">调用栈（<code>CallStack</code>） <a class="header-anchor" href="#调用栈-callstack" aria-label="Permalink to &quot;调用栈（`CallStack`）&quot;">​</a></h3><p>调用栈（渲染主线程）是一种栈结构（先进后出）当一段<code>js</code>语句执行时，<code>js</code>引擎会将同步代码按照顺序依次压入调用栈中，然后从头开始执行。</p><h3 id="事件队列-taskqueue" tabindex="-1">事件队列（<code>TaskQueue</code>） <a class="header-anchor" href="#事件队列-taskqueue" aria-label="Permalink to &quot;事件队列（`TaskQueue`）&quot;">​</a></h3><p>其是一个队列（先进先出），存放异步任务</p><h3 id="javascript执行顺序" tabindex="-1">JavaScript执行顺序 <a class="header-anchor" href="#javascript执行顺序" aria-label="Permalink to &quot;JavaScript执行顺序&quot;">​</a></h3><ol><li>代码执行，将同步任务压入调用栈中。</li><li>异步任务暂时放入<code>webcore</code>(根据浏览器而来，<code>-webkit-</code>）中。</li><li>等到异步任务时机到达时（定时器事件到达，或者请求返回等），将异步任务放入事件队列（<code>微任务队列</code>、<code>交互队列</code>、<code>延时队列</code>）中去。</li><li>调用栈（渲染主线程）中代码执行，直至执行完毕</li><li>检查任务队列（<code>微任务队列</code><strong>优先级最高</strong>-相对于其他事件队列、比如<code>交互队列</code>、<code>延时队列</code>）是否有微任务要执行。将微任务队列中的事件放入调用栈（渲染主线程）中去执行。</li><li>当调用栈中无要执行程序时，检查是否有<code>DOM</code>渲染操作，尝试渲染<code>DOM</code></li><li>操作4，5，6依次次循环执行....</li></ol><h2 id="知识点" tabindex="-1">知识点 <a class="header-anchor" href="#知识点" aria-label="Permalink to &quot;知识点&quot;">​</a></h2><div class="info custom-block"><p class="custom-block-title">异步</p><ul><li>单线程是异步产生的原因</li><li>事件循环是异步的实现方式</li></ul></div><div class="info custom-block"><p class="custom-block-title">如何理解JavaScript中的异步？</p><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。而渲染主线程承担着诸多的工作，渲染页面、执行JS都在其中运行。如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p></div><div class="info custom-block"><p class="custom-block-title">JS中的计时器能做到精确计时吗？为什么？</p><ul><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于JS的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li><li>按照W3C的标准，浏览器实现计时器时，如果嵌套层级超过5层，则会带有4毫秒的最少时间，这样在计时时间少于4毫秒时又带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ul></div>',13),i=[l];function s(d,r,n,p,h,u){return a(),o("div",null,i)}const m=e(t,[["render",s]]);export{k as __pageData,m as default};

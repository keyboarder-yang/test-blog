import{_ as e,o as l,c as a,R as o}from"./chunks/framework.Vrn_wj7i.js";const q=JSON.parse('{"title":"css学习","description":"","frontmatter":{"title":"css学习","date":"2022-12-17T13:09:55.000Z","tags":"BEM 规范","summary":"BEM命名规范","categories":"CSS"},"headers":[],"relativePath":"files/CSS/BEM.md","filePath":"files/CSS/BEM.md"}'),t={name:"files/CSS/BEM.md"},i=o('<h1 id="bem命名规范" tabindex="-1">BEM命名规范 <a class="header-anchor" href="#bem命名规范" aria-label="Permalink to &quot;BEM命名规范&quot;">​</a></h1><h2 id="什么是bem" tabindex="-1">什么是BEM <a class="header-anchor" href="#什么是bem" aria-label="Permalink to &quot;什么是BEM&quot;">​</a></h2><blockquote><p>B(block) E(element)M(modifier),分别代表块，元素，修饰符。是一种CSS命名规范，有利于CSS代码更加利于维护。</p></blockquote><h3 id="block" tabindex="-1">block <a class="header-anchor" href="#block" aria-label="Permalink to &quot;block&quot;">​</a></h3><blockquote><p>可重用的功能独立的页面组件。在HTML中，块由class属性表示。</p></blockquote><div class="tip custom-block"><p class="custom-block-title">特性</p><ol><li>块的名称描述其用途（菜单或者按钮）而不是状态（红色或者黄色）</li><li>块不应该影响其周围环境，意味着不应该设置该块的外部边距或者定位</li><li>使用BEM时，也不应该使用CSS标记或者ID选择器</li><li>块之间可以嵌套</li><li>可以有任意层数的嵌套层级</li></ol></div><h3 id="element" tabindex="-1">element <a class="header-anchor" href="#element" aria-label="Permalink to &quot;element&quot;">​</a></h3><blockquote><p>块的合成部分，不可以单独使用</p></blockquote><div class="tip custom-block"><p class="custom-block-title">特性</p><ol><li>描述其用途，而不是状态</li><li>通过&quot;__&quot;和块进行分割</li><li>元素始终是块的一部分，而不是另一个元素。这意味着元素名称不能定义层次结构</li></ol></div><h3 id="modifier" tabindex="-1">modifier <a class="header-anchor" href="#modifier" aria-label="Permalink to &quot;modifier&quot;">​</a></h3><blockquote><p>定义块或元素的外观、状态或行为的实体</p></blockquote><div class="tip custom-block"><p class="custom-block-title">特性</p><ol><li>修饰符通过&quot;--&quot;或者&quot;_&quot;连接</li><li>描述一个外观（大小，颜色），状态（disabled，focused），行为等</li></ol></div><h2 id="bem规范的优缺点" tabindex="-1">BEM规范的优缺点 <a class="header-anchor" href="#bem规范的优缺点" aria-label="Permalink to &quot;BEM规范的优缺点&quot;">​</a></h2><h3 id="优点" tabindex="-1">优点： <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点：&quot;">​</a></h3><ol><li>不同表达代表不同含义，使得css代码结构更加清晰（即代表模块，还是一个模块中的元素亦或状态）</li><li>命名规范，不同团队风格统一更易于维护</li></ol><h3 id="缺点" tabindex="-1">缺点： <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点：&quot;">​</a></h3><ol><li>命名较长，现在项目中一般都会引入css预处理器，如scss，less等，这样使得命名较长这个缺点并不是那么的严重</li></ol>',17),s=[i];function c(r,d,n,h,u,b){return l(),a("div",null,s)}const _=e(t,[["render",c]]);export{q as __pageData,_ as default};

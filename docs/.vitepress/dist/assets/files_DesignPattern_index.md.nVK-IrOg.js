import{_ as e,o as a,c as t,R as o}from"./chunks/framework.Vrn_wj7i.js";const b=JSON.parse('{"title":"设计模式学习","description":"","frontmatter":{"title":"设计模式学习","date":"2022-05-16T22:09:55.000Z","tags":"设计模式","summary":"对于设计模式的一些简单理解","categories":"DesignPattern"},"headers":[],"relativePath":"files/DesignPattern/index.md","filePath":"files/DesignPattern/index.md"}'),l={name:"files/DesignPattern/index.md"},i=o('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-label="Permalink to &quot;设计模式&quot;">​</a></h1><h2 id="什么是设计模式" tabindex="-1">什么是设计模式 <a class="header-anchor" href="#什么是设计模式" aria-label="Permalink to &quot;什么是设计模式&quot;">​</a></h2><blockquote><p>设计模式是优秀代码设计经验的总结，具体到某个设计模式的话，就是在特定环境，特定问题的一种优雅的解决方案。</p></blockquote><h2 id="为什么使用设计模式" tabindex="-1">为什么使用设计模式 <a class="header-anchor" href="#为什么使用设计模式" aria-label="Permalink to &quot;为什么使用设计模式&quot;">​</a></h2><blockquote><p>使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 项目中合理地运用设计模式可以完美地解决很多问题，每种模式在现实中都有相应的原理来与之对应，每种模式都描述了一个在我们周围不断重复发生的问题，以及该问题的核心解决方案，这也是设计模式能被广泛应用的原因。</p></blockquote><h2 id="设计模式的种类" tabindex="-1">设计模式的种类 <a class="header-anchor" href="#设计模式的种类" aria-label="Permalink to &quot;设计模式的种类&quot;">​</a></h2><ul><li><p>设计模式分为3大类</p><ul><li><p>创建型模式</p><blockquote><p>处理对象的创建，根据实际情况使用合适的方式创建对象，解决创建类或者实例化对象时产生的问题</p></blockquote></li><li><p>结构型模式</p><blockquote><p>通过识别系统中组件间的简单关系来简化系统的设计。解决类或者对象组合在一起时候的问题</p></blockquote></li><li><p>行为型模式</p><blockquote><p>用于识别对象之间常见的交互模式并加以实现。解决类或者对象之间耦合、职责关系的问题</p></blockquote></li></ul></li></ul>',7),r=[i];function n(s,c,d,p,u,_){return a(),t("div",null,r)}const q=e(l,[["render",n]]);export{b as __pageData,q as default};

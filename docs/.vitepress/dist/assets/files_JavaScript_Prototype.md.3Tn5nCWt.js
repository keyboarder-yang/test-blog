import{_ as o,o as e,c as t,R as c}from"./chunks/framework.Vrn_wj7i.js";const b=JSON.parse('{"title":"js学习 --- 原型和原型链","description":"","frontmatter":{"title":"js学习 --- 原型和原型链","date":"2022-06-03T14:21:21.000Z","tags":"原型链","summary":"对于原型和原型链的总结","categories":"JavaScript"},"headers":[],"relativePath":"files/JavaScript/Prototype.md","filePath":"files/JavaScript/Prototype.md"}'),a={name:"files/JavaScript/Prototype.md"},r=c('<h1 id="原型和原型链" tabindex="-1">原型和原型链 <a class="header-anchor" href="#原型和原型链" aria-label="Permalink to &quot;原型和原型链&quot;">​</a></h1><p><a href="https://imgse.com/i/zc0kUP" target="_blank" rel="noreferrer"><img src="https://s1.ax1x.com/2022/12/07/zc0kUP.png" alt="zc0kUP.png"></a></p><h2 id="原型" tabindex="-1">原型 <a class="header-anchor" href="#原型" aria-label="Permalink to &quot;原型&quot;">​</a></h2><h3 id="函数对象和普通对象" tabindex="-1">函数对象和普通对象 <a class="header-anchor" href="#函数对象和普通对象" aria-label="Permalink to &quot;函数对象和普通对象&quot;">​</a></h3><ol><li>JavaScript中函数也是对象</li><li>所有 Function 的实例都是函数对象，其他的均为普通对象，其中包括 Function 实例的实例。</li></ol><h3 id="proto" tabindex="-1"><code>__proto__</code> <a class="header-anchor" href="#proto" aria-label="Permalink to &quot;`__proto__`&quot;">​</a></h3><ol><li><code>__proto__</code>是对象的隐式原型</li><li><code>__proto__</code>是对象所独有的(函数是特殊的对象，故函数也有该属性)</li><li><code>__proto__</code>指向另一个对象，也就是它的原型对象（其构造函数的原型）</li></ol><h3 id="prototype" tabindex="-1"><code>prototype</code> <a class="header-anchor" href="#prototype" aria-label="Permalink to &quot;`prototype`&quot;">​</a></h3><ol><li><code>prototype</code>是函数所独有的，含义就是函数的原型对象</li><li>给其它对象提供共享属性的对象。<code>prototype</code>自己也是对象.</li><li>任何一个对象都可以作为<code>prototype</code>属性来使用</li></ol><h3 id="constructor" tabindex="-1"><code>constructor</code> <a class="header-anchor" href="#constructor" aria-label="Permalink to &quot;`constructor`&quot;">​</a></h3><ol><li><code>constructor</code>是对象所独有的(函数是特殊的对象，故函数也有该属性)</li><li>每一个对象都有其对应的构造函数，本身或者继承而来,并且指向构造函数</li></ol><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><blockquote><p>当你在访问一个对象属性的时候，如果该对象内部不存在这个属性，那么就去它的<code>__proto__</code>属性所指向的父类对象上查找，如果父类对象依旧不存在这个属性，那么就去其父类的__proto__属性所指向的父类对象上去查找。以此类推，直到找到null。而这个查找的过程，也就构成了我们常说的原型链。</p></blockquote><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ol><li><code>__proto__</code>指向其构造函数的原型（<code>prototype</code>）</li><li><code>String</code>、<code>Array</code>、<code>Number</code>、<code>Function</code>、<code>Object</code>等都是 <code>function</code>,其构造函数都是<code>Function</code></li><li>由1,2可知，<code>String</code>、<code>Array</code>、<code>Number</code>等的<code>__proto__</code>都指向 <code>Function.prototype</code></li><li><code>Function</code>的<code>__proto__</code>指向其自身的<code>prototype</code></li><li><code>Function.prototype</code>的<code>__proto__</code>指向<code>Object.prototype</code></li><li><code>Object.prototye</code>的<code>__proto__</code>指向顶端<code>null</code></li></ol><h2 id="参考文献和文章出处" tabindex="-1">参考文献和文章出处 <a class="header-anchor" href="#参考文献和文章出处" aria-label="Permalink to &quot;参考文献和文章出处&quot;">​</a></h2><p><a href="https://juejin.cn/post/6844903984335945736#heading-4" target="_blank" rel="noreferrer">【THE LAST TIME】一文吃透所有JS原型相关知识点</a></p>',17),d=[r];function i(l,n,_,p,s,h){return e(),t("div",null,d)}const m=o(a,[["render",i]]);export{b as __pageData,m as default};

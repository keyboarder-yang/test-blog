import{_ as t,o as e,c as d,R as l}from"./chunks/framework.Vrn_wj7i.js";const p=JSON.parse('{"title":"js学习 --- 正则表达式","description":"","frontmatter":{"title":"js学习 --- 正则表达式","date":"2022-06-13T23:38:02.000Z","tags":"正则","summary":"正则表达式的学习总结","Categories":"正则表达式"},"headers":[],"relativePath":"files/JavaScript/RegExp.md","filePath":"files/JavaScript/RegExp.md"}'),r={name:"files/JavaScript/RegExp.md"},a=l('<h1 id="正则表达式" tabindex="-1">正则表达式 <a class="header-anchor" href="#正则表达式" aria-label="Permalink to &quot;正则表达式&quot;">​</a></h1><blockquote><p><a href="https://c.runoob.com/front-end/854/" target="_blank" rel="noreferrer">正则在线测试地址</a></p></blockquote><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><blockquote><ul><li><p>正则表达式就是一种文本模式---用来对字符串进行增删改查</p></li><li><p>正则表达式使用单个字符串来进行描述，匹配一系列匹配某个句法规则的字符串。</p></li><li><p>正则表达式描述了一种字符串匹配的模式，可以用来检查一个串是否含有某种子串、将匹配的子串替换或者从某个串中取出符合条件的子串等。</p></li></ul></blockquote><h2 id="语法" tabindex="-1">语法 <a class="header-anchor" href="#语法" aria-label="Permalink to &quot;语法&quot;">​</a></h2><blockquote><p>构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起创建更大的表达式。</p><p>正则表达式的组件可以是：</p><ul><li>单个的字符</li><li>字符集合</li><li>字符范围</li><li>字符间的选择或者所有这些组件的任意组合</li></ul></blockquote><h3 id="_1-普通字符" tabindex="-1">1. 普通字符 <a class="header-anchor" href="#_1-普通字符" aria-label="Permalink to &quot;1. 普通字符&quot;">​</a></h3><blockquote><p>包括所有大写和小写字母，所有数字，所有标点符号和一些其他符号</p></blockquote><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">[]</td><td style="text-align:center;">匹配的集合</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">取反(出现在集合中)或者是字符串的开始位置</td></tr><tr><td style="text-align:center;">[a-z]</td><td style="text-align:center;">表示一个区间，字母<code>a-z</code></td></tr><tr><td style="text-align:center;">\\.</td><td style="text-align:center;">匹配 <code>.</code></td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:center;">匹配空白符（包括换行）</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:center;">匹配非空白符（不包括换行）</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:center;">匹配字母、数字、下划线 ===<code> [A-Za-z0-9_]</code></td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:center;">匹配除（字母、数字、下划线）之外的</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:center;">匹配一个单词边界，也就是指单词和空格间的位置</td></tr><tr><td style="text-align:center;">\\B</td><td style="text-align:center;">匹配非单词边界。<code>er\\B</code> 能匹配 <code>verb</code> 中的 <code>er</code>，但不能匹配 <code>never</code> 中的<code>er</code></td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:center;">匹配一个数字</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:center;">匹配非数字</td></tr></tbody></table><h3 id="_2-特殊字符" tabindex="-1">2. 特殊字符 <a class="header-anchor" href="#_2-特殊字符" aria-label="Permalink to &quot;2. 特殊字符&quot;">​</a></h3><blockquote><p>特殊字符就是一些有特殊含义的字符，要匹配这些字符，必须首先使字符转义。</p></blockquote><table><thead><tr><th style="text-align:center;">符号</th><th style="text-align:center;">含义</th></tr></thead><tbody><tr><td style="text-align:center;">$</td><td style="text-align:center;">匹配输入字符串的结尾位置</td></tr><tr><td style="text-align:center;">()</td><td style="text-align:center;">标记一个子表达式的开始和结束位置</td></tr><tr><td style="text-align:center;">*</td><td style="text-align:center;">匹配前面的子表达式0次或者多次 (≥0)</td></tr><tr><td style="text-align:center;">+</td><td style="text-align:center;">匹配前面的子表达式1次或者多次 (≥1)</td></tr><tr><td style="text-align:center;">.</td><td style="text-align:center;">匹配除换行符 \\n 之外的任何单字符。</td></tr><tr><td style="text-align:center;">[</td><td style="text-align:center;">标记一个中括号表达式的开始。要匹配 [，请使用 \\[。</td></tr><tr><td style="text-align:center;">]</td><td style="text-align:center;">标记一个中括号表达式的结束。要匹配 ]，请使用 \\]。</td></tr><tr><td style="text-align:center;">?</td><td style="text-align:center;">匹配前面的子表达式0次或1次 (=0 || =1)。要匹配 ? 字符，请使用 ?。</td></tr><tr><td style="text-align:center;">\\</td><td style="text-align:center;">将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符</td></tr><tr><td style="text-align:center;">^</td><td style="text-align:center;">m匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 ^。</td></tr><tr><td style="text-align:center;">|</td><td style="text-align:center;">指明两项之间的一个选择。要匹配</td></tr></tbody></table><h3 id="_3-限定符" tabindex="-1">3. 限定符 <a class="header-anchor" href="#_3-限定符" aria-label="Permalink to &quot;3. 限定符&quot;">​</a></h3><blockquote><p>限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配</p><ul><li><code>*</code> :0次或者多次</li><li><code>+</code>:1次或者多次</li><li><code>?</code>:0次或者1次</li><li><code>{n}</code>:匹配确定的n次</li><li><code>{n,}</code>:至少匹配n次</li><li><code>{n,m}</code>:至少n次，至多m次</li></ul><blockquote><p>在 <code>*</code>和<code>+</code>之后添加<code>?</code>表示最小匹配</p></blockquote></blockquote><h3 id="_4-捕获元" tabindex="-1">4. 捕获元 <a class="header-anchor" href="#_4-捕获元" aria-label="Permalink to &quot;4. 捕获元&quot;">​</a></h3><blockquote><ul><li><code>?=</code>:<code>exp1(?=exp2)</code> 查找<code>exp2</code> 前面的<code>exp1</code></li><li><code>?&lt;=</code>:<code>(?&lt;=exp2)exp1</code> 查找<code>exp2</code> 后面的<code>exp1</code></li><li><code>?!</code>:<code>exp1(?!exp2)</code> 查找后面不是<code>exp2</code> 的<code>exp1</code></li><li><code>?&lt;!</code>:<code>(?&lt;!exp2)exp1</code> 查找前面不是<code>exp2</code> 的<code>exp1</code></li></ul></blockquote><h2 id="修饰符-常用" tabindex="-1">修饰符（常用） <a class="header-anchor" href="#修饰符-常用" aria-label="Permalink to &quot;修饰符（常用）&quot;">​</a></h2><table><thead><tr><th style="text-align:center;">修饰符</th><th style="text-align:center;">含义</th><th style="text-align:center;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td style="text-align:center;"><code>ignore</code> - 不区分大小写</td><td style="text-align:center;">将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</td></tr><tr><td style="text-align:center;">g</td><td style="text-align:center;"><code>global</code> - 全局匹配</td><td style="text-align:center;">查找所有的匹配项。</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:center;"><code>multiline</code> - 多行匹配</td><td style="text-align:center;">使边界字符 <strong>^</strong> 和 <strong>$</strong> 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</td></tr><tr><td style="text-align:center;">s</td><td style="text-align:center;">特殊字符圆点 <strong>.</strong> 中包含换行符 <strong>\\n</strong></td><td style="text-align:center;">默认情况下的圆点 <strong>.</strong> 是匹配除换行符 <strong>\\n</strong> 之外的任何字符，加上 <strong>s</strong> 修饰符之后, <strong>.</strong> 中包含换行符 \\n。</td></tr></tbody></table><h2 id="常用正则表达式" tabindex="-1">常用正则表达式 <a class="header-anchor" href="#常用正则表达式" aria-label="Permalink to &quot;常用正则表达式&quot;">​</a></h2><blockquote><ul><li>email: <code>**^\\w+([-+.]\\w+)\\*@\\w+([-.]\\w+)\\*\\.\\w+([-.]\\w+)\\*$**</code></li><li>phone: <code>**^(13[0-9]|14[01456879]|15[0-35-9]|16[2567]|17[0-8]|18[0-9]|19[0-35-9])\\d{8}$**</code></li><li>Id（15或者18位）: <code>**(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)**</code></li><li>password(以字母开头，长度在6~18之间，只能包含字母、数字和下划线): <code>**^[a-zA-Z]\\w{5,17}$**</code></li><li>password(必须包含大小写字母和数字的组合，不能使用特殊字符，长度在 8-10 之间): <code>**^(?=.\\*\\d)(?=.\\*[a-z])(?=.\\*[A-Z])[a-zA-Z0-9]{8,10}$**</code></li><li>date（<code>yyyy-mm-dd</code>）: <code>**^\\d{4}-\\d{1,2}-\\d{1,2}**</code></li></ul></blockquote>',20),o=[a];function c(n,i,s,x,g,y){return e(),d("div",null,o)}const u=t(r,[["render",c]]);export{p as __pageData,u as default};

import{_ as s,o as i,c as a,R as n}from"./chunks/framework.Vrn_wj7i.js";const g=JSON.parse('{"title":"js学习 --- this指向问题","description":"","frontmatter":{"title":"js学习 --- this指向问题","date":"2022-05-18T22:31:16.000Z","tags":"this指向","summary":"对于This指向的一些简单理解","categories":"JavaScript"},"headers":[],"relativePath":"files/JavaScript/This.md","filePath":"files/JavaScript/This.md"}'),l={name:"files/JavaScript/This.md"},h=n(`<h1 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h1><ul><li>this -&gt; JavaScript 关键字</li><li>当前环境执行期上下文对象的一个属性</li><li>this在不同的环境、不同作用下，表现不同</li><li>this是在运行时绑定的，而非编写时绑定，所以它的上下文取决于调用时的环境</li></ul><h2 id="_1-错误认识" tabindex="-1">1. 错误认识 <a class="header-anchor" href="#_1-错误认识" aria-label="Permalink to &quot;1. 错误认识&quot;">​</a></h2><ol><li>指向自身</li><li>指向它的作用域</li></ol><h2 id="_2-绑定规则" tabindex="-1">2. 绑定规则 <a class="header-anchor" href="#_2-绑定规则" aria-label="Permalink to &quot;2. 绑定规则&quot;">​</a></h2><ol><li>默认绑定</li><li>隐式绑定</li><li>显式绑定</li><li>new关键字绑定</li></ol><h3 id="_2-1-默认绑定" tabindex="-1">2.1 默认绑定 <a class="header-anchor" href="#_2-1-默认绑定" aria-label="Permalink to &quot;2.1 默认绑定&quot;">​</a></h3><blockquote><p>函数直接调用，函数中的this指向，当非严格模式时指向window，严格模式时指向undefined</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fooStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;use strict&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Window ===&gt; this --&gt; Window</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fooStrict</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//  undefined ===&gt; this --&gt; undefined</span></span></code></pre></div><h3 id="_2-2-隐式绑定" tabindex="-1">2.2 隐式绑定 <a class="header-anchor" href="#_2-2-隐式绑定" aria-label="Permalink to &quot;2.2 隐式绑定&quot;">​</a></h3><blockquote><p>当函数作为一个对象的某个属性值被调用时，this指向方法的拥有者</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Keyboarder-Yang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fn: foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">obj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj ===&gt; this --&gt; obj(调用者)</span></span></code></pre></div><h4 id="_2-2-1-隐式丢失现象" tabindex="-1">2.2.1 隐式丢失现象 <a class="header-anchor" href="#_2-2-1-隐式丢失现象" aria-label="Permalink to &quot;2.2.1 隐式丢失现象&quot;">​</a></h4><blockquote><p>被隐式绑定的函数丢失绑定对象的现象</p></blockquote><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Keyboarder-Yang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fn: foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj.fn;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">bar</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj ===&gt; this --&gt; Window</span></span></code></pre></div><blockquote><p>上述代码中引obj中fn--&gt;foo只是定义未执行，所以obj.foo实际是foo函数本身，所以bar引用的是foo函数本身，故bar执行相当于foo执行，所以上述代码指向的是Window</p></blockquote><h3 id="_2-3-显式绑定" tabindex="-1">2.3 显式绑定 <a class="header-anchor" href="#_2-3-显式绑定" aria-label="Permalink to &quot;2.3 显式绑定&quot;">​</a></h3><blockquote><p>通过修改this指向，达到绑定this的方式称为显示绑定。</p></blockquote><h4 id="_2-3-1-call" tabindex="-1">2.3.1 call <a class="header-anchor" href="#_2-3-1-call" aria-label="Permalink to &quot;2.3.1 call&quot;">​</a></h4><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> obj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Keyboarder-Yang&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    fn: foo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">foo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj ===&gt; this --&gt; Window</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">foo.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">call</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(obj) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// obj ===&gt; this --&gt; obj</span></span></code></pre></div><h4 id="_2-3-2-apply" tabindex="-1">2.3.2 apply <a class="header-anchor" href="#_2-3-2-apply" aria-label="Permalink to &quot;2.3.2 apply&quot;">​</a></h4><blockquote><p>从this绑定的角度而言，apply和call一样，区别体现在其他参数上</p></blockquote><h3 id="_2-4-new关键字绑定" tabindex="-1">2.4 new关键字绑定 <a class="header-anchor" href="#_2-4-new关键字绑定" aria-label="Permalink to &quot;2.4 new关键字绑定&quot;">​</a></h3><p><a href="./New.html">new的过程中做了哪些事情</a></p><blockquote><p>this 指向新构造的对象</p></blockquote><h2 id="_3-this指向优先级" tabindex="-1">3. this指向优先级 <a class="header-anchor" href="#_3-this指向优先级" aria-label="Permalink to &quot;3. this指向优先级&quot;">​</a></h2><p>new --&gt; 显式绑定 --&gt; 隐式绑定 --&gt; 默认绑定</p><h2 id="_4-说明" tabindex="-1">4. 说明 <a class="header-anchor" href="#_4-说明" aria-label="Permalink to &quot;4. 说明&quot;">​</a></h2><blockquote><p>以上情况不包含箭头函数的情况，箭头函数的this继承与父级的this指向</p></blockquote><h2 id="_5-常见的this指向" tabindex="-1">5. 常见的this指向 <a class="header-anchor" href="#_5-常见的this指向" aria-label="Permalink to &quot;5. 常见的this指向&quot;">​</a></h2><blockquote><p>this 指向（函数在定义的时候this是不确定的，只有在调用的时候才可以确定this的指向）</p><ol><li>普通函数中、定时器和自调用函数，内部的this指向全局window（严格模式下，普通函数this指向undefined）</li><li>函数作为一个对象的方法，该对象被调用，this指向该对象</li><li>构造函数this指向返回的这个对象</li><li>箭头函数，内外this一致，绑定最近的一层对象上</li></ol></blockquote>`,31),t=[h];function p(e,k,o,r,E,d){return i(),a("div",null,t)}const y=s(l,[["render",p]]);export{g as __pageData,y as default};

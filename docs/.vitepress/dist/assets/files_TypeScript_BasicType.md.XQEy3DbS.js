import{_ as a,o as e,c as s,R as n}from"./chunks/framework.Vrn_wj7i.js";const g=JSON.parse('{"title":"ts学习 --- 基本类型","description":"","frontmatter":{"title":"ts学习 --- 基本类型","date":"2022-06-09T22:54:04.000Z","tags":"ts","summary":"ts基础类型","categories":"TypeScript"},"headers":[],"relativePath":"files/TypeScript/BasicType.md","filePath":"files/TypeScript/BasicType.md"}'),t={name:"files/TypeScript/BasicType.md"},l=n(`<h4 id="基础类型" tabindex="-1">基础类型 <a class="header-anchor" href="#基础类型" aria-label="Permalink to &quot;基础类型&quot;">​</a></h4><blockquote><p>定义变量、函数参数，函数返回值等的数据类型</p></blockquote><h5 id="boolean" tabindex="-1">boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to &quot;boolean&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let isDone: boolean = false;</span></span>
<span class="line"><span>isDone = 5; // Type &#39;number&#39; is not assignable to type &#39;boolean&#39;.</span></span></code></pre></div><h5 id="number" tabindex="-1">number <a class="header-anchor" href="#number" aria-label="Permalink to &quot;number&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let num:number = 10;</span></span>
<span class="line"><span>num = true; // Type &#39;boolean&#39; is not assignable to type &#39;number&#39;</span></span></code></pre></div><h5 id="string" tabindex="-1">string <a class="header-anchor" href="#string" aria-label="Permalink to &quot;string&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let name:string = &#39;yanghong&#39;;</span></span></code></pre></div><h5 id="undefined" tabindex="-1">undefined <a class="header-anchor" href="#undefined" aria-label="Permalink to &quot;undefined&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let undef:undefined = undefined;</span></span></code></pre></div><h5 id="null" tabindex="-1">null <a class="header-anchor" href="#null" aria-label="Permalink to &quot;null&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let nullVal:null = null;</span></span></code></pre></div><h5 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let arr:Array = [];</span></span>
<span class="line"><span>let arr:number[] = [1,2,3];</span></span>
<span class="line"><span>let arr:Array&lt;number&gt; = [1,2,3]</span></span></code></pre></div><h5 id="object" tabindex="-1">object <a class="header-anchor" href="#object" aria-label="Permalink to &quot;object&quot;">​</a></h5><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let obj:object = {};</span></span>
<span class="line"><span>obj = null;</span></span>
<span class="line"><span>obj = {name:&#39;yanghong&#39;}</span></span></code></pre></div><h5 id="元组" tabindex="-1">元组 <a class="header-anchor" href="#元组" aria-label="Permalink to &quot;元组&quot;">​</a></h5><blockquote><p>元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let x: [string,number] = [&#39;yanghong&#39;,1];</span></span></code></pre></div><h5 id="any" tabindex="-1">any <a class="header-anchor" href="#any" aria-label="Permalink to &quot;any&quot;">​</a></h5><blockquote><p>有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这种情况下，我们可以使用 <code>any</code>类型来标记这些变量：</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let notSure:any = 4;</span></span>
<span class="line"><span>notSure = &#39;yanghong&#39;;</span></span>
<span class="line"><span>notSure = true;</span></span></code></pre></div><h5 id="类型断言" tabindex="-1">类型断言 <a class="header-anchor" href="#类型断言" aria-label="Permalink to &quot;类型断言&quot;">​</a></h5><blockquote><p>简言之：告诉编译器，我知道自己是什么类型，也知道自己在干什么。有两种方式</p><ul><li><code>&lt;type&gt; value</code></li><li><code>value as type</code></li></ul></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>let someValue: any = &#39;yanghong&#39;;</span></span>
<span class="line"><span>let strLength: number = (&lt;string&gt;someValue).length;</span></span>
<span class="line"><span>// 或者</span></span>
<span class="line"><span>strLength: number = (someValue as string).length;</span></span></code></pre></div><h5 id="类型推断" tabindex="-1">类型推断 <a class="header-anchor" href="#类型推断" aria-label="Permalink to &quot;类型推断&quot;">​</a></h5><blockquote><p>根据变量初次定义时的类型。若定义未赋值，则类型为any类型</p></blockquote>`,27),i=[l];function o(p,c,r,d,h,u){return e(),s("div",null,i)}const m=a(t,[["render",o]]);export{g as __pageData,m as default};
